// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.16.0
// source: statistics.proto

//  protoc statistics.proto --go_out=.
//protoc statistics.proto  -–go_out=plugins=grpc:.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyRequest) Reset() {
	*x = EmptyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyRequest) ProtoMessage() {}

func (x *EmptyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyRequest.ProtoReflect.Descriptor instead.
func (*EmptyRequest) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{0}
}

type BuyerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyerId int64 `protobuf:"varint,1,opt,name=buyer_id,json=buyerId,proto3" json:"buyer_id,omitempty"`
}

func (x *BuyerRequest) Reset() {
	*x = BuyerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyerRequest) ProtoMessage() {}

func (x *BuyerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyerRequest.ProtoReflect.Descriptor instead.
func (*BuyerRequest) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{1}
}

func (x *BuyerRequest) GetBuyerId() int64 {
	if x != nil {
		return x.BuyerId
	}
	return 0
}

type SellerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellerId int64 `protobuf:"varint,1,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
}

func (x *SellerRequest) Reset() {
	*x = SellerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerRequest) ProtoMessage() {}

func (x *SellerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerRequest.ProtoReflect.Descriptor instead.
func (*SellerRequest) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{2}
}

func (x *SellerRequest) GetSellerId() int64 {
	if x != nil {
		return x.SellerId
	}
	return 0
}

type CountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountRequest) Reset() {
	*x = CountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRequest) ProtoMessage() {}

func (x *CountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRequest.ProtoReflect.Descriptor instead.
func (*CountRequest) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{3}
}

func (x *CountRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CountRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// The request message containing the user's name.
type StatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StatisticsRequest) Reset() {
	*x = StatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsRequest) ProtoMessage() {}

func (x *StatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsRequest.ProtoReflect.Descriptor instead.
func (*StatisticsRequest) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{4}
}

func (x *StatisticsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StatisticsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *StatisticsReply) Reset() {
	*x = StatisticsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatisticsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatisticsReply) ProtoMessage() {}

func (x *StatisticsReply) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatisticsReply.ProtoReflect.Descriptor instead.
func (*StatisticsReply) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{5}
}

func (x *StatisticsReply) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StatisticsReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// The response message containing the greetings.
type BuyerStatisticsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//δ�� ����Ϣ ����
	UnreadMessageCount int64 `protobuf:"varint,1,opt,name=unread_message_count,json=unreadMessageCount,proto3" json:"unread_message_count,omitempty"`
	//��Һ��� ����
	FriendCount int64 `protobuf:"varint,2,opt,name=friend_count,json=friendCount,proto3" json:"friend_count,omitempty"`
	//�̳�����
	ShopScore int64 `protobuf:"varint,3,opt,name=shop_score,json=shopScore,proto3" json:"shop_score,omitempty"`
	//��֧��������
	PayingOrderCount int64 `protobuf:"varint,4,opt,name=paying_order_count,json=payingOrderCount,proto3" json:"paying_order_count,omitempty"`
	//��ȷ�϶�����
	ConfirmingOrderCount int64 `protobuf:"varint,5,opt,name=confirming_order_count,json=confirmingOrderCount,proto3" json:"confirming_order_count,omitempty"`
	//�����۶�����
	CommentingOrderCount int64 `protobuf:"varint,6,opt,name=commenting_order_count,json=commentingOrderCount,proto3" json:"commenting_order_count,omitempty"`
}

func (x *BuyerStatisticsReply) Reset() {
	*x = BuyerStatisticsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuyerStatisticsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyerStatisticsReply) ProtoMessage() {}

func (x *BuyerStatisticsReply) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyerStatisticsReply.ProtoReflect.Descriptor instead.
func (*BuyerStatisticsReply) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{6}
}

func (x *BuyerStatisticsReply) GetUnreadMessageCount() int64 {
	if x != nil {
		return x.UnreadMessageCount
	}
	return 0
}

func (x *BuyerStatisticsReply) GetFriendCount() int64 {
	if x != nil {
		return x.FriendCount
	}
	return 0
}

func (x *BuyerStatisticsReply) GetShopScore() int64 {
	if x != nil {
		return x.ShopScore
	}
	return 0
}

func (x *BuyerStatisticsReply) GetPayingOrderCount() int64 {
	if x != nil {
		return x.PayingOrderCount
	}
	return 0
}

func (x *BuyerStatisticsReply) GetConfirmingOrderCount() int64 {
	if x != nil {
		return x.ConfirmingOrderCount
	}
	return 0
}

func (x *BuyerStatisticsReply) GetCommentingOrderCount() int64 {
	if x != nil {
		return x.CommentingOrderCount
	}
	return 0
}

type SellerStatisticsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//δ�� ����Ϣ ����
	UnreadMessageCount int64 `protobuf:"varint,1,opt,name=unread_message_count,json=unreadMessageCount,proto3" json:"unread_message_count,omitempty"`
	//���Һ��� ����
	FriendCount int64 `protobuf:"varint,2,opt,name=friend_count,json=friendCount,proto3" json:"friend_count,omitempty"`
}

func (x *SellerStatisticsReply) Reset() {
	*x = SellerStatisticsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_statistics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SellerStatisticsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SellerStatisticsReply) ProtoMessage() {}

func (x *SellerStatisticsReply) ProtoReflect() protoreflect.Message {
	mi := &file_statistics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SellerStatisticsReply.ProtoReflect.Descriptor instead.
func (*SellerStatisticsReply) Descriptor() ([]byte, []int) {
	return file_statistics_proto_rawDescGZIP(), []int{7}
}

func (x *SellerStatisticsReply) GetUnreadMessageCount() int64 {
	if x != nil {
		return x.UnreadMessageCount
	}
	return 0
}

func (x *SellerStatisticsReply) GetFriendCount() int64 {
	if x != nil {
		return x.FriendCount
	}
	return 0
}

var File_statistics_proto protoreflect.FileDescriptor

var file_statistics_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x67, 0x72, 0x65, 0x65, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0c, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x34, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x3b, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xa4,
	0x02, 0x0a, 0x14, 0x42, 0x75, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x15, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30,
	0x0a, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x32, 0xde, 0x05, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x42, 0x75,
	0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x45, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x67,
	0x72, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x43, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x65, 0x72, 0x53,
	0x68, 0x6f, 0x70, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4e, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x4e, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x75, 0x79, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x41, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x14, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x53,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x55, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x65, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x72, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x42, 0x0e, 0x5a, 0x0c, 0x69, 0x6d, 0x70, 0x6c, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_statistics_proto_rawDescOnce sync.Once
	file_statistics_proto_rawDescData = file_statistics_proto_rawDesc
)

func file_statistics_proto_rawDescGZIP() []byte {
	file_statistics_proto_rawDescOnce.Do(func() {
		file_statistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_statistics_proto_rawDescData)
	})
	return file_statistics_proto_rawDescData
}

var file_statistics_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_statistics_proto_goTypes = []interface{}{
	(*EmptyRequest)(nil),          // 0: greet.EmptyRequest
	(*BuyerRequest)(nil),          // 1: greet.BuyerRequest
	(*SellerRequest)(nil),         // 2: greet.SellerRequest
	(*CountRequest)(nil),          // 3: greet.CountRequest
	(*StatisticsRequest)(nil),     // 4: greet.StatisticsRequest
	(*StatisticsReply)(nil),       // 5: greet.StatisticsReply
	(*BuyerStatisticsReply)(nil),  // 6: greet.BuyerStatisticsReply
	(*SellerStatisticsReply)(nil), // 7: greet.SellerStatisticsReply
}
var file_statistics_proto_depIdxs = []int32{
	1,  // 0: greet.Statistics.BuyerTotal:input_type -> greet.BuyerRequest
	3,  // 1: greet.Statistics.UpdateBuyerUnReadCount:input_type -> greet.CountRequest
	3,  // 2: greet.Statistics.UpdateBuyerFriendCount:input_type -> greet.CountRequest
	3,  // 3: greet.Statistics.UpdateBuyerShopScore:input_type -> greet.CountRequest
	3,  // 4: greet.Statistics.UpdateBuyerPayingOrderCount:input_type -> greet.CountRequest
	3,  // 5: greet.Statistics.UpdateBuyerConfirmingOrderCount:input_type -> greet.CountRequest
	3,  // 6: greet.Statistics.UpdateBuyerCommentingOrderCount:input_type -> greet.CountRequest
	2,  // 7: greet.Statistics.SellerTotal:input_type -> greet.SellerRequest
	3,  // 8: greet.Statistics.UpdateSellerUnReadCount:input_type -> greet.CountRequest
	3,  // 9: greet.Statistics.UpdateSellerFriendCount:input_type -> greet.CountRequest
	6,  // 10: greet.Statistics.BuyerTotal:output_type -> greet.BuyerStatisticsReply
	5,  // 11: greet.Statistics.UpdateBuyerUnReadCount:output_type -> greet.StatisticsReply
	5,  // 12: greet.Statistics.UpdateBuyerFriendCount:output_type -> greet.StatisticsReply
	5,  // 13: greet.Statistics.UpdateBuyerShopScore:output_type -> greet.StatisticsReply
	5,  // 14: greet.Statistics.UpdateBuyerPayingOrderCount:output_type -> greet.StatisticsReply
	5,  // 15: greet.Statistics.UpdateBuyerConfirmingOrderCount:output_type -> greet.StatisticsReply
	5,  // 16: greet.Statistics.UpdateBuyerCommentingOrderCount:output_type -> greet.StatisticsReply
	7,  // 17: greet.Statistics.SellerTotal:output_type -> greet.SellerStatisticsReply
	5,  // 18: greet.Statistics.UpdateSellerUnReadCount:output_type -> greet.StatisticsReply
	5,  // 19: greet.Statistics.UpdateSellerFriendCount:output_type -> greet.StatisticsReply
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_statistics_proto_init() }
func file_statistics_proto_init() {
	if File_statistics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_statistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatisticsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuyerStatisticsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_statistics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SellerStatisticsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_statistics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_statistics_proto_goTypes,
		DependencyIndexes: file_statistics_proto_depIdxs,
		MessageInfos:      file_statistics_proto_msgTypes,
	}.Build()
	File_statistics_proto = out.File
	file_statistics_proto_rawDesc = nil
	file_statistics_proto_goTypes = nil
	file_statistics_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StatisticsClient is the client API for Statistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatisticsClient interface {
	// Sends a greeting
	BuyerTotal(ctx context.Context, in *BuyerRequest, opts ...grpc.CallOption) (*BuyerStatisticsReply, error)
	UpdateBuyerUnReadCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
	UpdateBuyerFriendCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
	UpdateBuyerShopScore(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
	UpdateBuyerPayingOrderCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
	UpdateBuyerConfirmingOrderCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
	UpdateBuyerCommentingOrderCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
	SellerTotal(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*SellerStatisticsReply, error)
	UpdateSellerUnReadCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
	UpdateSellerFriendCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error)
}

type statisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsClient(cc grpc.ClientConnInterface) StatisticsClient {
	return &statisticsClient{cc}
}

func (c *statisticsClient) BuyerTotal(ctx context.Context, in *BuyerRequest, opts ...grpc.CallOption) (*BuyerStatisticsReply, error) {
	out := new(BuyerStatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/BuyerTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateBuyerUnReadCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateBuyerUnReadCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateBuyerFriendCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateBuyerFriendCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateBuyerShopScore(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateBuyerShopScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateBuyerPayingOrderCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateBuyerPayingOrderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateBuyerConfirmingOrderCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateBuyerConfirmingOrderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateBuyerCommentingOrderCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateBuyerCommentingOrderCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) SellerTotal(ctx context.Context, in *SellerRequest, opts ...grpc.CallOption) (*SellerStatisticsReply, error) {
	out := new(SellerStatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/SellerTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateSellerUnReadCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateSellerUnReadCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsClient) UpdateSellerFriendCount(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*StatisticsReply, error) {
	out := new(StatisticsReply)
	err := c.cc.Invoke(ctx, "/greet.Statistics/UpdateSellerFriendCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServer is the server API for Statistics service.
type StatisticsServer interface {
	// Sends a greeting
	BuyerTotal(context.Context, *BuyerRequest) (*BuyerStatisticsReply, error)
	UpdateBuyerUnReadCount(context.Context, *CountRequest) (*StatisticsReply, error)
	UpdateBuyerFriendCount(context.Context, *CountRequest) (*StatisticsReply, error)
	UpdateBuyerShopScore(context.Context, *CountRequest) (*StatisticsReply, error)
	UpdateBuyerPayingOrderCount(context.Context, *CountRequest) (*StatisticsReply, error)
	UpdateBuyerConfirmingOrderCount(context.Context, *CountRequest) (*StatisticsReply, error)
	UpdateBuyerCommentingOrderCount(context.Context, *CountRequest) (*StatisticsReply, error)
	SellerTotal(context.Context, *SellerRequest) (*SellerStatisticsReply, error)
	UpdateSellerUnReadCount(context.Context, *CountRequest) (*StatisticsReply, error)
	UpdateSellerFriendCount(context.Context, *CountRequest) (*StatisticsReply, error)
}

// UnimplementedStatisticsServer can be embedded to have forward compatible implementations.
type UnimplementedStatisticsServer struct {
}

func (*UnimplementedStatisticsServer) BuyerTotal(context.Context, *BuyerRequest) (*BuyerStatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyerTotal not implemented")
}
func (*UnimplementedStatisticsServer) UpdateBuyerUnReadCount(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerUnReadCount not implemented")
}
func (*UnimplementedStatisticsServer) UpdateBuyerFriendCount(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerFriendCount not implemented")
}
func (*UnimplementedStatisticsServer) UpdateBuyerShopScore(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerShopScore not implemented")
}
func (*UnimplementedStatisticsServer) UpdateBuyerPayingOrderCount(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerPayingOrderCount not implemented")
}
func (*UnimplementedStatisticsServer) UpdateBuyerConfirmingOrderCount(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerConfirmingOrderCount not implemented")
}
func (*UnimplementedStatisticsServer) UpdateBuyerCommentingOrderCount(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyerCommentingOrderCount not implemented")
}
func (*UnimplementedStatisticsServer) SellerTotal(context.Context, *SellerRequest) (*SellerStatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellerTotal not implemented")
}
func (*UnimplementedStatisticsServer) UpdateSellerUnReadCount(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerUnReadCount not implemented")
}
func (*UnimplementedStatisticsServer) UpdateSellerFriendCount(context.Context, *CountRequest) (*StatisticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerFriendCount not implemented")
}

func RegisterStatisticsServer(s *grpc.Server, srv StatisticsServer) {
	s.RegisterService(&_Statistics_serviceDesc, srv)
}

func _Statistics_BuyerTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).BuyerTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/BuyerTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).BuyerTotal(ctx, req.(*BuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateBuyerUnReadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateBuyerUnReadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateBuyerUnReadCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateBuyerUnReadCount(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateBuyerFriendCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateBuyerFriendCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateBuyerFriendCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateBuyerFriendCount(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateBuyerShopScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateBuyerShopScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateBuyerShopScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateBuyerShopScore(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateBuyerPayingOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateBuyerPayingOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateBuyerPayingOrderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateBuyerPayingOrderCount(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateBuyerConfirmingOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateBuyerConfirmingOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateBuyerConfirmingOrderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateBuyerConfirmingOrderCount(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateBuyerCommentingOrderCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateBuyerCommentingOrderCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateBuyerCommentingOrderCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateBuyerCommentingOrderCount(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_SellerTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).SellerTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/SellerTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).SellerTotal(ctx, req.(*SellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateSellerUnReadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateSellerUnReadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateSellerUnReadCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateSellerUnReadCount(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Statistics_UpdateSellerFriendCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServer).UpdateSellerFriendCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greet.Statistics/UpdateSellerFriendCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServer).UpdateSellerFriendCount(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Statistics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "greet.Statistics",
	HandlerType: (*StatisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyerTotal",
			Handler:    _Statistics_BuyerTotal_Handler,
		},
		{
			MethodName: "UpdateBuyerUnReadCount",
			Handler:    _Statistics_UpdateBuyerUnReadCount_Handler,
		},
		{
			MethodName: "UpdateBuyerFriendCount",
			Handler:    _Statistics_UpdateBuyerFriendCount_Handler,
		},
		{
			MethodName: "UpdateBuyerShopScore",
			Handler:    _Statistics_UpdateBuyerShopScore_Handler,
		},
		{
			MethodName: "UpdateBuyerPayingOrderCount",
			Handler:    _Statistics_UpdateBuyerPayingOrderCount_Handler,
		},
		{
			MethodName: "UpdateBuyerConfirmingOrderCount",
			Handler:    _Statistics_UpdateBuyerConfirmingOrderCount_Handler,
		},
		{
			MethodName: "UpdateBuyerCommentingOrderCount",
			Handler:    _Statistics_UpdateBuyerCommentingOrderCount_Handler,
		},
		{
			MethodName: "SellerTotal",
			Handler:    _Statistics_SellerTotal_Handler,
		},
		{
			MethodName: "UpdateSellerUnReadCount",
			Handler:    _Statistics_UpdateSellerUnReadCount_Handler,
		},
		{
			MethodName: "UpdateSellerFriendCount",
			Handler:    _Statistics_UpdateSellerFriendCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistics.proto",
}
