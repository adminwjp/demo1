package models

import (
	"sign/util"
	"github.com/beego/beego/v2/client/orm"
	"strconv"
	"strings"
	"time"
)

//友好的附件大小信息
func (attachment Attachment)GetFriendlyFileLength() string {
	if attachment.FileLength > 0 {
		if (attachment.FileLength > 1024*1024) {
			return strconv.FormatInt(attachment.FileLength / 1024/1024,10)+"M"
		} else {
			return strconv.FormatInt(attachment.FileLength/1024, 10) + "K"
		}
	} else {
		return ""
	}
}

//获取文件直连Url
func (attachment Attachment) GetDirectlyUrl(key string,extension string) string {
	return ""
	/*var url = new AttachmentService(TenantTypeId).GetDirectlyUrl(this);
	  if (key!="")
	  {
	  if (Path.GetExtension(url).Contains(".gif"))
	  	return url;
	  url = new ImageAccessor(TenantTypeId).GetDirectlyUrl(this, key, false);
	  }
	  if (!string.IsNullOrEmpty(extension))
	  {
	  url = Path.ChangeExtension(url, extension);
	  }
	  return url;*/
}

//获取附件原始文件名称
func (attachment Attachment)  GetOriginalFileName() string {
	return attachment.FileName+"-original-" +util.GetFileExtension(attachment.FileName)
}

//获取附件存储的相对路径
func (attachment Attachment)  GetRelativePath()string {
	return ""
	/*TenantFileSettings tenantAttachmentSettings = TenantFileSettings.GetRegisteredSettings(this.TenantTypeId);
	  if (tenantAttachmentSettings == null)
	  return string.Empty;

	  IStoreProvider storeProvider = DIContainer.ResolveNamed<IStoreProvider>(tenantAttachmentSettings.StoreProviderName);
	  if (storeProvider == null)
	  return string.Empty;

	  string[] datePaths = new string[] { tenantAttachmentSettings.FileDirectory };

	  if (tenantAttachmentSettings.AutoGenerateDirectoryByDate)
	  datePaths = datePaths.Concat(this.DateCreated.ToString("yyyy-MM-dd").Split('-')).ToArray();

	  return storeProvider.JoinDirectory(datePaths);*/
}

//生成随机文件名
func GenerateFileName(extension string )string {
	return strconv.FormatInt(time.Now().Unix(),15)+ extension
}
//生成随机文件名
func (attachment Attachment)  GenerateFileName()string {
	 return GenerateFileName(util.GetFileExtension(attachment.FriendlyFileName))
}

//依据MIME获取MediaType
func (attachment Attachment)   GetMediaType(contentType string )int {
	if (attachment.ContentType == "") {
		return Other_MediaType
	}
	var extensionType = "" //MimeTypeConfiguration.GetExtension(contentType);
	switch extensionType {
	case "txt":
	case "rtf":
	case "doc":
	case "docx":
	case "wps":
	case "pptx":
	case "ppt":
	case "pps":
	case "xls":
	case "xlsx":
	case "pdf":
		return Document_MediaType //可在线预览

	case "jpg":
	case "png":
	case "bmp":
	case "gif":
		return Image_MediaType

	case "flv":
	case "rmvb":
	case "mp4":
	case "3gp":
	case "mpeg":
	case "wmv":
	case "mov":
	case "avi":
	case "asf":
		return Video_MediaType

	case "zip":
	case "rar":
		return Compressed_MediaType

	case "swf":
		return Flash_MediaType

	case "mp3":
	case "wav":
	case "rm":
		return Audio_MediaType

	}
	return Other_MediaType
}

//父类别
func (category Category) GetParent()*Category  {
	if category.Depth==0 || category.ParentId==0 {
		return nil
	}else {
		var categories= category.getList(Category{CategoryId: category.ParentId})
		if categories!=nil&&len(categories)>0{
			return  categories[0]
		}
		return  nil
	}
}

//子类别列表
func (category Category) GetChildren()[]*Category  {
	if category.ChildCount>0{
		return category.getList(Category{ParentId: category.ParentId})
	}
	return  nil
}


func (category Category) getList(where Category)[]*Category  {
	o := orm.NewOrm()
	var categories []*Category
	o.QueryTable(where).All(&categories)
	return  categories
}

//获取标题图
func (category Category) GetImageUrl(key string) string  {
	//o := orm.NewOrm()
	return ""
}

//获取内容模型集合
func (contentCategory ContentCategory)ContentTypes()[]*ContentItem  {
	if contentCategory.ContentModelKeys!=""{
		var sql="select * from tn_ContentItems where ContentItemId in ("+contentCategory.ContentModelKeys+")"
		o := orm.NewOrm()
		var contentItems []*ContentItem
		o.Raw(sql).QueryRows(&contentItems)
		return contentItems
	}
	return nil
}
//是否栏目列表显示
func (contentCategory ContentCategory)IsListDisplay() bool{
	return  true
}
//取所有子栏目(非即时更新)
func (contentCategory ContentCategory)Children()[]*ContentCategory{
	if contentCategory.ChildCount>0{
		o := orm.NewOrm()
		var contentCategories []*ContentCategory
		o.QueryTable(ContentCategory{ParentId: contentCategory.CategoryId}).OrderBy("DisplayOrder").All(&contentCategories)
		return contentCategories
	}
	return nil
}

//所有的附件Id集合
func (contentItem ContentItem)AttachmentIdsFinal() []int64{
	return  nil
}
//是否允许手机端编辑
func (contentItem ContentItem)IsAllowMobileEdit() bool{
	return  true
}
//是否允许评论
func (contentItem ContentItem)IsComment() bool{
	return  true
}
//编辑前是否为草稿
func (contentItem ContentItem)IsDraft() bool{
	return  true
}
//是否允许内容末尾显示附件列表
func (contentItem ContentItem)IsVisible() bool{
	return  true
}
//附表中的字段
func (contentItem ContentItem)AdditionalProperties() map[string]interface{}{
	if contentItem.additionalProperties==nil || len(contentItem.additionalProperties)==0{

	}
	return  contentItem.additionalProperties
}
func (contentItem ContentItem)SetAdditionalProperties(additionalProperties map[string]interface{}) {
	contentItem.additionalProperties=additionalProperties
}


//附表中的字段
func (contentModel ContentModel)AdditionalFields() []*ContentModelAdditionalFields{
	if contentModel.ModelId<1{
		return  nil
	}
	o := orm.NewOrm()
	var contentModelAdditionalFieldses []*ContentModelAdditionalFields
	o.QueryTable(ContentModelAdditionalFields{ModelId: contentModel.ModelId}).All(&contentModelAdditionalFieldses)
	return contentModelAdditionalFieldses
}

//获取父级数组扩展
func (comment Comment)GetParentIds() []string{
	if comment.ParentIds==""{
		return  nil
	}
	return  strings.Split(comment.ParentIds,",")
}
//获取父级数组扩展
func (comment Comment)Contact() string{
	return ""
}
//审核项标识
func (comment Comment)AuditItemKey() string{
	if comment.TenantTypeId==TenantTypeIds.Thread(){
		return AuditItemKeys.Post
	}else{
		return AuditItemKeys.Comment
	}
}